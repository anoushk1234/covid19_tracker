{"version":3,"sources":["components/Picker.jsx","components/Stat_card.jsx","components/Chart.jsx","components/Header.jsx","ColorModeSwitcher.jsx","App.jsx","theme.js","index.js"],"names":["Picker","countries","addCountry","variant","onChange","defaultValue","map","element","i","value","Stat_card","props","useState","isLoad","setIsLoad","w","mx","py","px","bg","useColorModeValue","shadow","rounded","justifyContent","base","md","mt","h","fit","isLoaded","onLoad","src","img","h2","color","fontSize","fontWeight","count","p","mb","tag","date","desc","BarChart","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","height","width","options","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","legend","Header","sm","lg","xl","bgGradient","bgClip","ColorModeSwitcher","useColorMode","colorMode","toggleColorMode","text","size","aria-label","colorScheme","mr","onClick","icon","isRound","App","setCountries","infected","setInfected","recovered","setRecovered","deaths","setDeaths","fetchCovid","useCallback","a","fetch","json","jsonData","console","log","forEach","prevCountries","useEffect","whichCountry","selectCountry","fetchInfected","jsonDataI","obj","fetchRecovered","jsonDataR","fetchDeaths","jsonDataD","spacing","align","alignSelf","justify","pt","pd","e","target","styles","global","body","mode","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46f5a569.chunk.js","sourcesContent":["import { Select } from \"@chakra-ui/react\";\r\n// NO need to import react when using functional compos \r\n\r\nimport { FormControl } from \"@chakra-ui/form-control\";\r\nimport { useEffect } from 'react';\r\n\r\n\r\n\r\nconst Picker = ({ countries, addCountry }) => {\r\n//console.log(\"pre\"+countries,addCountry)\r\n// let temp=[];\r\n// temp=[...countries]\r\n// useEffect(()=>{\r\n//    temp=[...countries]\r\n// })\r\n// console.log(temp)\r\n  return (\r\n    <FormControl>\r\n    <Select variant=\"filled\" onChange={addCountry}>\r\n      <option defaultValue>Country</option>\r\n      {\r\n      countries.map((element,i) =>\r\n        <option key={i} value={element}>{element}</option>\r\n      )\r\n      //console.log(\"post\"+countries,addCountry,Event)\r\n      }\r\n    </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n//console.log(document.getElementsByTagName('option').value); // IMPORTANT - dont use dom inside JSX\r\n\r\nexport default Picker;\r\n\r\n// HOPE THIS HELPED","import {\r\n  Box,\r\n  chakra,\r\n  useColorModeValue,\r\n  Flex,\r\n  Image,\r\n  SkeletonCircle,\r\n} from \"@chakra-ui/react\";\r\nimport SkeletonLoader from \"tiny-skeleton-loader-react\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport React from \"react\";\r\n\r\nconst Stat_card = (props) => {\r\n  const [isLoad, setIsLoad] = useState(false);\r\n  return (\r\n    <Box\r\n      w=\"sm\"\r\n      mx=\"auto\"\r\n      py={4}\r\n      px={8}\r\n      bg={useColorModeValue(\"white\", \"gray.900\")}\r\n      shadow=\"lg\"\r\n      rounded=\"lg\"\r\n    >\r\n      <Flex justifyContent={{ base: \"center\", md: \"end\" }} mt={-16}>\r\n        <SkeletonCircle w={20} h={20} fit=\"cover\" isLoaded={isLoad}>\r\n          <Image\r\n            onLoad={() => {\r\n              setIsLoad(true);\r\n            }}\r\n            w={20}\r\n            h={20}\r\n            fit=\"cover\"\r\n            src={props.img}\r\n          />\r\n        </SkeletonCircle>\r\n      </Flex>\r\n      <chakra.h2\r\n        color={useColorModeValue(\"gray.800\", \"white\")}\r\n        fontSize={{ base: \"2xl\", md: \"3xl\" }}\r\n        mt={{ base: 2, md: 0 }}\r\n        fontWeight=\"bold\"\r\n      >\r\n        {props.count}\r\n      </chakra.h2>\r\n\r\n      <chakra.p\r\n        mt={1}\r\n        mb={3}\r\n        color={useColorModeValue(\"gray.600\", \"red.400\")}\r\n        fontSize=\"3xl\"\r\n      >\r\n        {props.tag}\r\n      </chakra.p>\r\n      <chakra.p\r\n        mt={1}\r\n        color={useColorModeValue(\"gray.600\", \"gray.300\")}\r\n        fontSize=\"xl\"\r\n      >\r\n        {props.date}\r\n      </chakra.p>\r\n      <chakra.p\r\n        mb={3}\r\n        color={useColorModeValue(\"gray.600\", \"gray.300\")}\r\n        fontSize=\"xl\"\r\n      >\r\n        <i> {props.desc}</i>\r\n      </chakra.p>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Stat_card;\r\n","import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Box, useColourModeValue } from \"@chakra-ui/react\";\r\n// defaults.global.tooltips.enabled = false\r\n// defaults.global.legend.position = 'bottom'\r\n\r\nconst BarChart = () => {\r\n  return (\r\n    <Box\r\n      w=\"5xl\"\r\n      py={4}\r\n      px={8}\r\n      rounded=\"lg\"\r\n      bg={\"gray.900\"}\r\n      shadow=\"lg\"\r\n    >\r\n      <div>\r\n        <Line\r\n          data={{\r\n            labels: [\"Red\", \"Blue\", \"Yellow\", \"Green\", \"Purple\", \"Orange\"],\r\n            datasets: [\r\n              {\r\n                label: \"# of votes\",\r\n                data: [12, 19, 3, 5, 2, 3],\r\n                backgroundColor: [\r\n                  \"rgba(255, 99, 132, 0.2)\",\r\n                  \"rgba(54, 162, 235, 0.2)\",\r\n                  \"rgba(255, 206, 86, 0.2)\",\r\n                  \"rgba(75, 192, 192, 0.2)\",\r\n                  \"rgba(153, 102, 255, 0.2)\",\r\n                  \"rgba(255, 159, 64, 0.2)\",\r\n                ],\r\n                borderColor: [\r\n                  \"rgba(255, 99, 132, 1)\",\r\n                  \"rgba(54, 162, 235, 1)\",\r\n                  \"rgba(255, 206, 86, 1)\",\r\n                  \"rgba(75, 192, 192, 1)\",\r\n                  \"rgba(153, 102, 255, 1)\",\r\n                  \"rgba(255, 159, 64, 1)\",\r\n                ],\r\n                borderWidth: 1,\r\n              },\r\n              // {\r\n              //   label: 'Quantity',\r\n              //   data: [47, 52, 67, 58, 9, 50],\r\n              //   backgroundColor: 'orange',\r\n              //   borderColor: 'red',\r\n              // },\r\n            ],\r\n          }}\r\n          height={400}\r\n          width={600}\r\n          options={{\r\n            maintainAspectRatio: false,\r\n            scales: {\r\n              yAxes: [\r\n                {\r\n                  ticks: {\r\n                    beginAtZero: true,\r\n                  },\r\n                },\r\n              ],\r\n            },\r\n            legend: {\r\n              labels: {\r\n                fontSize: 25,\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default BarChart;\r\n","import { Heading } from '@chakra-ui/layout';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Heading\r\n      fontSize={{ base: 'xl', sm: '2xl', lg: '4xl', xl: '7xl' }}\r\n      bgGradient='linear(to-r,#e53935, #e35d5b)'\r\n      bgClip='text'\r\n    >\r\n      Covid 19 Tracker\r\n    </Heading>\r\n  );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\r\nimport { FaMoon, FaSun } from 'react-icons/fa';\r\n\r\nexport const ColorModeSwitcher = (props) => {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  const text = useColorModeValue('dark', 'light');\r\n\r\n  return (\r\n    <IconButton\r\n      size='lg'\r\n      fontSize='lg'\r\n      aria-label={`Switch to ${text} mode`}\r\n      colorScheme='blue'\r\n      mr={2}\r\n      mt={2}\r\n      onClick={toggleColorMode}\r\n      icon={colorMode === 'light' ? <FaMoon /> : <FaSun />}\r\n      isRound='true'\r\n      {...props}\r\n    />\r\n  );\r\n};","import {\r\n  HStack,\r\n  StackDivider,\r\n  VStack,\r\n  Box,\r\n  Flex,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\nimport Picker from \"./components/Picker\";\r\nimport Stat_card from \"./components/Stat_card\";\r\nimport BarChart from \"./components/Chart\";\r\nimport Header from \"./components/Header\";\r\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\r\nimport React from \"react\";\r\nimport { useState, useEffect, useCallback, useMemo } from \"react\";\r\nconst App = () => {\r\n  // var jsonData=[];\r\n  // let countries = [];\r\n  const [countries, setCountries] = useState([]);\r\n  const [infected, setInfected] = useState(0);\r\n  const [recovered, setRecovered]= useState(\"0\")\r\n  const [deaths, setDeaths]= useState(\"0\")\r\n  const fetchCovid = useCallback(async () => {\r\n    const data = await fetch(\r\n      \"https://api.apify.com/v2/key-value-stores/tVaYRsPHLjNdNBu7S/records/LATEST?disableRedirect=true\"\r\n    );\r\n    const jsonData = await data.json();\r\n    // jsArray=  [...jsonData];\r\n    console.log(jsonData[1][\"country\"]);\r\n    jsonData.forEach((element) => {\r\n      setCountries((prevCountries) => {\r\n        return [...prevCountries, element[\"country\"]];\r\n      });\r\n    });\r\n    //console.log(countries)\r\n  }, []);\r\n  useEffect(() => {\r\n    fetchCovid();\r\n  }, [fetchCovid]);\r\n\r\n  const [whichCountry, selectCountry] = useState(\"\");\r\n  const fetchInfected = useCallback(async () => {\r\n    const data = await fetch(\r\n      \"https://api.apify.com/v2/key-value-stores/tVaYRsPHLjNdNBu7S/records/LATEST?disableRedirect=true\"\r\n    );\r\n    const jsonDataI=await data.json()\r\n    console.log(whichCountry)\r\n    jsonDataI.forEach((obj)=>{\r\n      if(obj['country']==whichCountry){\r\n        setInfected(obj['infected'])\r\n      }\r\n    })\r\n\r\n  });\r\n  useEffect(() => {\r\n    fetchInfected();\r\n  }, [whichCountry]);\r\n\r\n  const fetchRecovered = useCallback(async () => {\r\n    const data = await fetch(\r\n      \"https://api.apify.com/v2/key-value-stores/tVaYRsPHLjNdNBu7S/records/LATEST?disableRedirect=true\"\r\n    );\r\n    const jsonDataR=await data.json()\r\n    console.log(whichCountry)\r\n    jsonDataR.forEach((obj)=>{\r\n      if(obj['country']==whichCountry){\r\n        setRecovered(obj['recovered'])\r\n      }\r\n    })\r\n\r\n  });\r\n  useEffect(() => {\r\n    fetchRecovered();\r\n  }, [whichCountry]);\r\n\r\n  const fetchDeaths = useCallback(async () => {\r\n    const data = await fetch(\r\n      \"https://api.apify.com/v2/key-value-stores/tVaYRsPHLjNdNBu7S/records/LATEST?disableRedirect=true\"\r\n    );\r\n    const jsonDataD=await data.json()\r\n    console.log(whichCountry)\r\n    jsonDataD.forEach((obj)=>{\r\n      if(obj['country']==whichCountry){\r\n        setDeaths(obj['deceased'])\r\n      }\r\n    })\r\n\r\n  });\r\n  useEffect(() => {\r\n    fetchDeaths();\r\n  }, [whichCountry]);\r\n\r\n  // const addCountry=(param)=>{\r\n  // selectCountry([...param]);\r\n  // }\r\n  const addCountry = (e) => {\r\n    console.log(\"ON SELECT CALLED\");\r\n    selectCountry(e.target.value);\r\n    console.log(whichCountry);\r\n  };\r\n\r\n  return (\r\n    <VStack\r\n      bg={useColorModeValue(\"white\", \"blue.700\")}\r\n      spacing={4}\r\n      align=\"stretch\"\r\n    >\r\n      <ColorModeSwitcher alignSelf=\"flex-end\" />\r\n      <Flex justify=\"center\">\r\n        <Header />\r\n      </Flex>\r\n      <Flex pt={20} pd={10} w=\"full\" justifyContent=\"center\">\r\n        <HStack mt={20} spacing=\"24px\">\r\n          <Stat_card\r\n            count={infected}\r\n            date=\"11/05/21\"\r\n            desc=\"Total infections\"\r\n            img=\"https://image.flaticon.com/icons/png/128/2659/2659980.png\"\r\n            tag=\"Infected\"\r\n          ></Stat_card>\r\n          <Stat_card\r\n            count={recovered}\r\n            date=\"11/05/21\"\r\n            tag=\"Recovered\"\r\n            desc=\"Total number of people recovered\"\r\n            img=\"https://image.flaticon.com/icons/png/128/1513/1513277.png\"\r\n          ></Stat_card>\r\n          <Stat_card\r\n            count={deaths}\r\n            date=\"11/05/21\"\r\n            tag=\"Deaths\"\r\n            desc=\"Total Number of Deaths\"\r\n            img=\"https://image.flaticon.com/icons/png/128/3922/3922093.png\"\r\n          ></Stat_card>\r\n        </HStack>\r\n      </Flex>\r\n      <Flex mt={20} w=\"md\" alignSelf=\"center\">\r\n        <Picker countries={countries} addCountry={addCountry}></Picker>\r\n      </Flex>\r\n      <Flex md={10} w=\"md\" alignSelf=\"center\">\r\n        {/* <Picker></Picker> */}\r\n      </Flex>\r\n      <Flex justify=\"center\">\r\n        <BarChart></BarChart>\r\n      </Flex>\r\n      <StackDivider h=\"10\" value=\"xyz\"></StackDivider>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { extendTheme } from '@chakra-ui/react';\r\nimport { mode } from '@chakra-ui/theme-tools';\r\n\r\nconst styles = {\r\n  global: (props) => ({\r\n    body: {\r\n      bg: mode('gray.200', 'gray.800')(props),\r\n    },\r\n  }),\r\n};\r\n\r\nconst config = {\r\n  initialColorMode: 'system',\r\n  useSystemColorMode: true,\r\n};\r\n\r\nconst theme = extendTheme({ config, styles });\r\nexport default theme;","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n//import reportWebVitals from './reportWebVitals';\nimport { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\";\nimport theme from \"./theme\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nReactDOM.render(\n  <StrictMode>\n  <ChakraProvider theme={theme}>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <App />\n  </ChakraProvider>\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}